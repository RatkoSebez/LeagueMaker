package com.lgm.demo.service.impl.singleelimination;

import com.lgm.demo.model.Match;
import com.lgm.demo.model.Tournament;
import com.lgm.demo.model.User;
import com.lgm.demo.model.dto.request.TournamentRequest;
import com.lgm.demo.model.dto.response.MatchResponse;
import com.lgm.demo.repository.*;
import com.lgm.demo.service.AuthService;
import com.lgm.demo.service.ScheduleService;
import com.lgm.demo.service.TournamentService;
import com.lgm.demo.service.CompetitorService;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import java.util.*;

@Service
@Qualifier("se")
public class SETournamentServiceImpl implements TournamentService{
    private final CompetitionRepository competitionRepository;
    private final CompetitorService competitorService;
    private final ScheduleService scheduleService;
    private final AuthService authService;
    private final UserRepository userRepository;
    private final MatchRepository matchRepository;

    public SETournamentServiceImpl(CompetitionRepository competitionRepository,
                                   CompetitorService competitorService,
                                   @Qualifier("se") ScheduleService scheduleService,
                                   AuthService authService,
                                   UserRepository userRepository,
                                   MatchRepository matchRepository){
        this.competitionRepository = competitionRepository;
        this.competitorService = competitorService;
        this.scheduleService = scheduleService;
        this.authService = authService;
        this.userRepository = userRepository;
        this.matchRepository = matchRepository;
    }

    @Override
    public Tournament createTournament(TournamentRequest request){
        int numberOfRounds = (int)Math.ceil(Math.log(request.getNumberOfCompetitors())/Math.log(2));

        Tournament tournament = new Tournament(
                null,
                null,
                null,
                request.getNumberOfCompetitors(),
                request.getTournamentName(),
                numberOfRounds
        );
        tournament.setCompetitors(competitorService.createEmptyCompetitors(tournament.getNumberOfCompetitors()));
        competitionRepository.save(tournament);
        tournament.setSchedule(scheduleService.createSchedule(tournament));
        // I'm saving tournament because in next line I will need ids that will be generated by saving to database
        competitionRepository.save(tournament);

        // set user who created tournament as its admin

        User user = authService.getLoggedInUser();
        List<Long> adminOfCompetitions = user.getAdminOfCompetitions();
        adminOfCompetitions.add(tournament.getId());
        user.setAdminOfCompetitions(adminOfCompetitions);
        userRepository.save(user);

        return tournament;
    }

    @Override
    public List<MatchResponse> getTournamentMatches(Long tournamentId){
        // hold matches that are sorted by match number (from first to last)
        List<Match> matches = matchRepository.getAllByCompetitionId(tournamentId);
        Collections.sort(matches);

        List<MatchResponse> responses = new ArrayList<>();
        for(Match match : matches)
            responses.add(MatchResponse.entityToDto(match));

        return responses;
    }
}
