package com.lgm.demo.service.impl.roudrobin;

import com.lgm.demo.model.*;
import com.lgm.demo.model.dto.request.LeagueRequest;
import com.lgm.demo.model.dto.response.CompetitorResponse;
import com.lgm.demo.model.dto.response.MatchResponse;
import com.lgm.demo.model.exceptions.CompetitionNotFoundException;
import com.lgm.demo.repository.*;
import com.lgm.demo.service.AuthService;
import com.lgm.demo.service.LeagueService;
import com.lgm.demo.service.CompetitorService;
import com.lgm.demo.service.ScheduleService;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import java.util.*;

@Service
@Qualifier("rr")
public class RRLeagueServiceImpl implements LeagueService {
    private final CompetitorService competitorService;
    private final ScheduleService scheduleService;
    private final CompetitionRepository competitionRepository;
    private final AuthService authService;
    private final UserRepository userRepository;
    private final MatchRepository matchRepository;
    private final LeagueRepository leagueRepository;

    public RRLeagueServiceImpl(CompetitorService competitorService,
                               @Qualifier("rr") ScheduleService scheduleService,
                               CompetitionRepository competitionRepository,
                               AuthService authService,
                               UserRepository userRepository,
                               MatchRepository matchRepository,
                               LeagueRepository leagueRepository) {
        this.competitorService = competitorService;
        this.scheduleService = scheduleService;
        this.competitionRepository = competitionRepository;
        this.authService = authService;
        this.userRepository = userRepository;
        this.matchRepository = matchRepository;
        this.leagueRepository = leagueRepository;
    }

    @Override
    public League createLeague(LeagueRequest req) {
        League league = new League(
                null,
                null,
                null,
                req.getNumberOfCompetitors(),
                req.getLeagueName(),
                req.getTimesEachPlaysWithEach(),
                req.getPointsWin(),
                req.getPointsDraw(),
                req.getPointsLose(),
                null,
                req.getCompetitionStart(),
                req.getDaysBetweenMatches()
        );
        league.setCompetitors(competitorService.createEmptyCompetitors(league.getNumberOfCompetitors()));
        competitionRepository.save(league);
        league.setSchedule(scheduleService.createSchedule(league));
        competitionRepository.save(league); // I'm saving league because in next line I will need ids that will be generated by saving to database
        competitionRepository.save(league);

        // set user who created league as its admin

        User user = authService.getLoggedInUser();
        List<Long> adminOfCompetitions = user.getAdminOfCompetitions();
        adminOfCompetitions.add(league.getId());
        user.setAdminOfCompetitions(adminOfCompetitions);
        userRepository.save(user);

        return league;
    }

    @Override
    public List<CompetitorResponse> getStandings(Long leagueId) {
        Competition competition = competitionRepository.getCompetitionById(leagueId)
                .orElseThrow(() -> new CompetitionNotFoundException(leagueId));
        List<Competitor> competitors = competition.getCompetitors();
        Collections.sort(competitors);
        return CompetitorResponse.entityToDtoList(competitors);
    }

    @Override
    public List<MatchResponse> getSchedule(Long competitionId, Integer round) {
        List<Match> matches = matchRepository.getMatchesByCompetitionIdAndRound(competitionId, round);
        Collections.sort(matches);
        List<MatchResponse> response = new ArrayList<>();
        for(Match match : matches)
            response.add(MatchResponse.entityToDto(match));
        return response;
    }

    @Override
    public Integer getNumberOfRounds(Long leagueId) {
        return leagueRepository.getById(leagueId).getRounds();
    }
}
